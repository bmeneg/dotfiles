-------------------------
Packages to be installed when initializing system at the first time after
installation:

Window manager:
    i3: 
		i3 i3status i3-ipc i3lock xbacklight feh

Development:
    general: 
		libtool automake autoconf gcc-c++ vim
    redhat: 
		krb5-workstation openldap
		(pip) python-bugzilla
			bugzilla --login login

Applications:
    general: 
	irssi
	mail: 
		isync(mbsync) msmtp mutt

-------------------------
Manual configurations:

- SSH key from GPG key:
	Setup previously created GPG private/public key as SSH authentication key:
	$ cat << EOF >> ~/.gnupg/gpg-agent.conf # create the file if needed
		enable-ssh-support
		EOF
	$ cat << EOF >> ~/.bash_profile
		unset SSH_AGENT_PID
		if [ "${gnupg_SSH_AUTH_SOCK_by:-0}" -ne $$ ]; then
			export SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
			gpgconf --launch gpg-agent
		fi
		EOF
	$ gpgconf --kill gpg-agent  # just in case it's already running
	$ source ~/.bash_profile
	$ gpg -k --with-keygrip

	copy the keygrip of the Authentication subkey ([*A]) and:

	$ echo "<keygrip>" > ~/.gnupg/sshcontrol

	check if the key was properly added:

	$ ssh-add -l

	In this way there is no need of ~/.ssh/id_rsa file to git/ssh/... authenticate.

	Note: the default GnuPG pinentry program conflicts somehow with tmux, so
	you might see issues during the ssh key usage. Install pinentry-gtk or -qt
	to workaround it (or stop using tmux).

- Setup Git for signing commits with the PGP key
	It's possible to use both SSH and PGP keys for signing Git
	commits, however, considering we're already using a PGP key to
	authenticate through SSH (previous tip) we're going to setup
	Git commit signing with PGP as well.

	$ git config --global gpg.program gpg2

	Now get the PGP key long ID

	$ gpg2 -K --keyid-format LONG
	/home/bmeneg/.gnupg/pubring.kbx
	-------------------------------
	sec   rsa2048/3823031E4660608D 2017-06-23 [CA]
	D27C21A928EACD4D3607EFEC3823031E4660608D
	...

	In the "sec" line, use the id after "rsa2048/":
	"3823031E4660608D". That's the original key and even though
	it's not directly set for "signing" (eg. [CA]) it has a subkey
	which is (eg. [S]). You can use the subkey directly or the
	general key that later "gpg2" will use the subkey
	internally.

	Note: for using the subkey, you need to append "!" to the key
	id.

	$ git config --global user.signingkey 3823031E4660608D

	And to automatically sign commits on `git commit`:

	$ git config --global commit.gpgsign true

- Setup MIT Kerberos on Windows:
	Download the client for windows: https://web.mit.edu/kerberos/dist/
    
	Check if the cache env variable was created:
		PS> $Env:KRB5CCNAME
		C:\ProgramData\MIT\Kerberos5\krb5cache
	otherwise create it yourself.

	Add all krb5 configuration to C:\ProgramData\MIT\Kerberos5\krb5.ini.
	Note: it can be copied from the Linux one (in /etc/krb5.conf), you only
	need to change the file extension from .conf to .ini.

	Now, to get Firefox working with SSO through GSSAPI:
		Open about:config page
		Set 'network.negotiate-auth.trusted-uris' to the desired domain
		Set 'network.auth.use-sspi' to 'false' (forcing GSSAPI usage)
	Some optional changes are:
		Set 'network.negotiate-auth.delegation-uris' to the same domain
		Set 'network.negotiate-auth.using-native-gsslib' to 'false'
		Set 'network.negotiate-auth.gsslib' to 'C:\Program Files\MIT\Kerberos\bin\gssapi64.dll'

		And you are done.
